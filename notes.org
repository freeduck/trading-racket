# -*- org-use-property-inheritance: t; org-confirm-babel-evaluate: nil;-*-
* Notes
** First dataset
 2018-11-18 22:21:00

 2019-02-18 22:21:00
 [[file:2018-11-18-22:21:00-2019-02-18-22:21:00.db]]
** COMMENT Test
tests are in ./test.rkt also testing plot
** First target
#+name: test-data
#+begin_src racket :results output drawer :noweb yes
  (require db)
  (define *db*
    (sqlite3-connect #:database
                     "2018-11-18-22:21:00-2019-02-18-22:21:00.db"))
#+end_src

#+RESULTS: test-data
:results:
:end:


#+name: plot-first-peak-target
#+begin_src racket :results output drawer
  #lang racket
  (require crypto-trading/test-data
           crypto-trading/plot
           crypto-trading/fit)
  (define rows (test-data-source first-trade second-trade-target))
  (define plotables (list (lines rows)
                          (function (let-values ([(qv pfit) (make-fitf rows)])
                                      pfit))))
  (plot-on-frame plotables)
#+end_src

#+RESULTS: plot-first-peak-target
:results:
:end:

#+RESULTS:
:results:
:end:

#+name: plot-first-peak-no-filters
#+begin_src racket :results output drawer :noweb yes
  #lang racket
  (require crypto-trading/test
           crypto-trading/plot)
  (define-values (first-peak fitf)
    (scan-window first-trade second-trade-target test-data-source))
  (define peak-rows (test-data-source first-trade first-peak))
  (println (round (/ (- first-peak first-trade) 60)))
  (println (string-append (number->string (fitf first-trade))
                          " "
                          (number->string(fitf first-peak))))
  (plot-on-frame (list (points peak-rows)
                       (function fitf)))
#+end_src

#+RESULTS: plot-first-peak-no-filters
:results:
4
"72.4375 79.5"
:end:
#+name: test-fit-header
#+begin_src racket :results output drawer
  #lang racket
  (require crypto-trading/test
           crypto-trading/plot
           crypto-trading/fit)

#+end_src
Using linear regression to filter out poly regression where linear
makes a better fit.
#+name: plot-first-peak-no-filters-linear-regression
#+begin_src racket :results output drawer
  #lang racket
  (require crypto-trading/test
           crypto-trading/fit
           crypto-trading/plot)

  (define-values (first-peak fitf)
    (scan-window first-trade second-trade-target test-data-source))
  (define peak-rows (test-data-source first-trade first-peak))
  (define-values (a b lfitf) (linear-regression (map vector->list peak-rows)))
  (define best-fit (evaluate-models peak-rows fitf lfitf))
  (plot-on-frame (list (points peak-rows)
                       (function fitf)
                       (function lfitf)))
  best-fit
#+end_src

#+RESULTS: plot-first-peak-no-filters-linear-regression
:results:
#<procedure:...-trading/fit.rkt:22:14>
:end:
#+name: test-regression-explicit-squared-error
#+begin_src racket :results output drawer :noweb yes
  #lang racket
  (require crypto-trading/test
           crypto-trading/fit)

  (define rows (test-data-source first-trade (+ 600 first-trade)))
  (define-values (a b lfit) (linear-regression (map vector->list rows)))
  (define-values (v pfit) (make-fitf rows))
  (define les (squared-error lfit rows))
  (define pes (squared-error pfit rows))
  (list les pes)
#+end_src

#+RESULTS: test-regression-explicit-squared-error
:results:
'(0.002749090908243732 66.56590468749998)
:end:

#+RESULTS:
:results:
'(0.002749090908243732 66.56590468749998)
:end:
Test find-peak:
Target peak can be detected and situations where linear regression fit better no peak is found
#+name: find-target-peak
#+begin_src racket :results output drawer
  #lang racket
  (require crypto-trading/test
           crypto-trading/fit)

  (define first-10-minutes-rows (test-data-source first-trade (+ 600 first-trade)))
  (define 10-min-peak (find-peak first-10-minutes-rows))
  (define first-target-rows (test-data-source first-trade second-trade-target))
  (define trade-peak (find-peak first-target-rows))
  (list 10-min-peak trade-peak)
#+end_src

#+RESULTS: find-peak
:results:
'(#f #<procedure:...-trading/fit.rkt:44:0>)
:end:
Find first peak using find-peak as filter when scanning
#+begin_src racket :results output drawer
  #lang racket
  (require crypto-trading/test
           crypto-trading/fit)

  (define first-found-peak (find-first-peak test-data-source first-trade second-trade-target))
  (define delta (- (first-found-peak) first-trade))
  (define hours (exact->inexact (/ delta 3600)))
  (println delta)
  (println hours)

#+end_src

#+RESULTS:
:results:
7200
2.0
:end:

#+begin_src racket :results output drawer
  #lang racket
  (require crypto-trading/test
           crypto-trading/fit
           crypto-trading/plot)

  (define first-found-peak (find-first-peak test-data-source first-trade second-trade-target))
  (define rows (test-data-source first-trade (first-found-peak)))
  (define analysis (trade-report-analysis first-found-peak))
  (plot-on-frame (list (lines rows)
                       (function (regression-analysis-linearfun analysis))
                       (function (regression-analysis-polyfun analysis))))
  (displayln (regression-analysis-linear-slope analysis))
#+end_src

#+RESULTS:
:results:
0.00011637961346298162
:end:
#+begin_src racket :results output drawer
  #lang racket
  (require crypto-trading/advicer
           crypto-trading/test)
  ;; First target - advice should be 'buy
  (get-advice (test-data-source first-trade second-trade-target))
  ;; First 10 minutes should be 'wait. prize delta too small
  (get-advice (test-data-source first-trade (+ 600 first-trade)))
  ;; First two hours should be 'wait. prize delta too small
  (get-advice (test-data-source first-trade (+ 7200 first-trade)))
#+end_src

#+RESULTS:
:results:
#<procedure:trade-advice>
#f
#f
:end:

#+begin_src racket :results output drawer
  #lang racket
  (require crypto-trading/test
           crypto-trading/plot)

  (define two-hour-rows (test-data-source first-trade 1542594240))
  (plot-on-frame (list (lines two-hour-rows)))
#+end_src

#+RESULTS:
:results:
:end:
#+name: plot-first-advice
#+begin_src racket :results output drawer
  #lang racket
  (require crypto-trading/advicer
           crypto-trading/test
           crypto-trading/plot)
  (define advice-index (find-first-advice (test-data-source first-trade second-trade-target)))
  (define advice (trade-report-analysis advice-index))
  (define analysis (trade-advice-analysis advice))
  (define time-series (regression-analysis-window analysis))
  (define last-in-time-series (vector-ref (last time-series) 0))
  (define polyfun (regression-analysis-polyfun analysis))
  (define linearfun (regression-analysis-linearfun analysis))
  (displayln (advice-index))
  (plot-on-frame (list (lines (test-data-source first-trade second-trade-target))
                       (lines (test-data-source first-trade (advice-index))
                              #:color '(0 200 0))
                       (function linearfun first-trade (advice-index)
                                 #:color '(200 200 0))
                       (function polyfun first-trade (advice-index)
                                 #:color '(0 0 200))))
  (displayln (exact->inexact (/ (- (advice-index) first-trade) 3600)))
  (displayln last-in-time-series)
#+end_src

#+RESULTS: plot-first-advice
:results:
trade-report-analysis: contract violation
  expected: trade-report?
  given: #f
  context...:
   "/tmp/babel-5111QS-/org-babel-5111O5Z.rkt": [running body]
   temp37_0
   for-loop
   run-module-instance!125
   perform-require!78
:end:
Found with pre model filter: threshold 2% of previous trade. And only
trailing peaks
#+name: plot-first-real-advice
#+header: :var end=1542729841
#+header: :prologue "#lang racket\n(require crypto-trading/test crypto-trading/plot crypto-trading/advicer)"
#+begin_src racket :results value drawer
  (define time-series (test-data-source first-trade end))
  (define advice (get-advice time-series))
  (define analysis (trade-advice-analysis advice))
  (define polyfun (regression-analysis-polyfun analysis))
  (define linearfun (regression-analysis-linearfun analysis))
  (define last-data-point (last time-series))
  (define poly-prediction (polyfun (vector-ref last-data-point 0)))
  (define linear-prediction (linearfun (vector-ref last-data-point 0)))
  (define prediction-diff (abs (- poly-prediction linear-prediction)))
  (displayln "Diff")
  (displayln prediction-diff)
  (plot-on-frame (list (lines (test-data-source first-trade second-trade-target))

                       (lines (test-data-source first-trade 1542729841)
                              #:color '(0 200 0))
                       (function polyfun first-trade 1542729841
                                 #:color '(200 200 0))
                       ;; (function linearfun first-trade 1542659640
                       ;;           #:color '(0 200 200))
                       ))
#+end_src

#+RESULTS: plot-first-real-advice
:results:
Diff
3.570336586679332
#<void>
:end:

#+RESULTS:
:results:
:end:
#+name: fit-vector
#+begin_src racket :results output drawer
  #lang racket

  (require crypto-trading/test
           crypto-trading/fit)
  ;; Trailing bottom
  (define rows (test-data-source first-trade second-trade-target))
  (define x&y (transpose rows))
  (define fitvector (apply fit (append x&y '(2))))
  (displayln fitvector)
  ;; Leading top peak 4 hour
  (define first-advice-rows-any-peak (test-data-source first-trade 1542594240))
  (define advice-x&y (transpose first-advice-rows-any-peak))
  (define advice-vector (apply fit (append advice-x&y '(2))))
  (displayln advice-vector)
  ;; Trailing top peak 2 hour
  (define 2h-rows (test-data-source first-trade (+ 7200 first-trade)))
  (define 2h-x&y (transpose 2h-rows))
  (define 2h-vector (apply fit (append 2h-x&y '(2))))
  (displayln 2h-vector)

#+end_src

#+RESULTS: fit-vector
:results:
#(2361157645.443029 -3.0610199421140973 9.920815046590834e-10)
#(-68827289515.43556 89.23627567761474 -2.892425716572949e-08)
#(-46450503479.14099 60.224184303559184 -1.9520522369660206e-08)
:end:

#+RESULTS:
:results:
#(2361157645.443029 -3.0610199421140973 9.920815046590834e-10)
#(-68827289515.43556 89.23627567761474 -2.892425716572949e-08)
#(-46450503479.14099 60.224184303559184 -1.9520522369660206e-08)
:end:
** Second target
x for lowest value in first window: 1542703740
#+begin_src racket :results output drawer
  #lang racket
  (require crypto-trading/test)
  (require crypto-trading/plot)
  (define-values (advice last-x)
    (next-advice test-data-source 1542729840))
  (define analysis (trade-advice-analysis advice))
  (define time-series (regression-analysis-window analysis))
  (define last-in-time-series (vector-ref (last time-series) 0))
  (displayln last-in-time-series)
  (displayln last-x)
  (displayln "Delta x")
  (displayln (- last-x last-in-time-series))
  (displayln "Delta find")
  (displayln (- last-in-time-series 1542729840))
  (displayln (advice))
  (displayln "window size")
  (displayln (exact->inexact (/ (- last-in-time-series 1542729840) 3600)))
  (plot-on-frame (list (lines (test-data-source first-trade (+ (* 20 3600) second-trade-target)))
                       (lines time-series
                              #:color '(200 200 0))
                       (function (regression-analysis-polyfun analysis)
                                 (vector-ref (first time-series) 0)
                                 (vector-ref (last time-series) 0)
                                 #:color '(0 0 200))))
#+end_src

#+RESULTS:
:results:
1542741180
1542741240
Delta x
60
Delta find
11340
buy
window size
3.15
1542729807
:end:
1542729840
#+name: start-at-previous-peak
#+begin_src racket :results output drawer
  #lang racket
  (require crypto-trading/test)
  (require crypto-trading/plot)
  (define latest-trade 1542729840)
  (define peak 1542703740)
  (define-values (advice last-x)
    (next-advice test-data-source 1542703740 #:initial-step (- 1542729840
                                                               1542703740)))
  (define analysis (trade-advice-analysis advice))
  (plot-on-frame (reverse (append (reverse (analysis->plotables analysis))
                                  (list (lines (test-data-source
                                                first-trade
                                                second-trade-target))))))
#+end_src

#+RESULTS:
:results:
:end:
1542729840
1542703740
#+begin_src racket :results output
  #lang racket
  (require crypto-trading/test)
  (require crypto-trading/plot)
  (define-values (plotables final-start-x)
    (for/fold ([plotables '()]
               [start first-trade])
              ([x (in-range 5)])
      (let*-values ([(advice last-x)
                     (next-advice test-data-source start)]
                    [(analysis)
                     (trade-advice-analysis advice)])
        (begin
          (displayln (abs (regression-analysis-linear-slope analysis)))
          (displayln (> (abs (regression-analysis-linear-slope analysis)) 9e-05))
          (displayln (vector-ref (last (regression-analysis-window analysis)) 0))
          (values (append plotables
                          (analysis->plotables analysis))
                  last-x)))))
  (plot-new-window? #t)
  (plot (append (list (lines (test-data-source first-trade (+ first-trade 497880))
                             #:color '(0 200 200)))
                plotables))
  ;; (plot-on-frame plotables)

#+end_src

#+RESULTS:
#+begin_example
0.00014133095856279265
#t
1542730380
0.00047856021022739615
#t
1542741180
0.0006795693048918393
#t
1542747780
0.0015272896172251575
#t
1542749580
5.269375658085316e-05
#f
1542831780
#+end_example
** TODO select large chunk of data                            :speed:of:test:
** TODO Color code graphs
** TODO remove from beginning

#+header: :prologue "#lang racket\n(require crypto-trading/test)"
#+begin_src racket :results value
  (- 1542828780 first-trade)
  (* 2 248940)
#+end_src

#+RESULTS:
: 497880
** Large data set
#+begin_src racket :results output drawer
  #lang racket
  (require crypto-trading/test)
  (require crypto-trading/plot)
  (define time-series (test-data-source first-trade (+ first-trade 497880)))
  (define advice (find-advice time-series))
  (define analysis (trade-advice-analysis advice))
  (define plotables (for/fold ([plotables '()])
                              ([x (in-range 2)])))
  (plot-new-window? #t)
  (plot (analysis->plotables analysis))
#+end_src

#+RESULTS:
:results:
/tmp/babel-7397x6K/org-babel-7397Tnc.rkt:7:18: for/fold: missing body expression after sequence bindings
  in: (for/fold ((plotables (quote ()))) ((x (in-range 2))))
  location...:
   /tmp/babel-7397x6K/org-babel-7397Tnc.rkt:7:18
  context...:
   do-raise-syntax-error
   apply-transformer-in-context
   apply-transformer52
   dispatch-transformer41
   loop
   [repeats 6 more times]
   module-begin-k
   expand-module16
   expand-capturing-lifts
   expand-single
   temp74_0
   compile16
   temp68_0
   standard-module-name-resolver
   module-path-index-resolve
   [repeats 1 more time]
:end:
** TODO Reverse data
   transpose -> reverse x -> transpose
** TODO trade-report-analysis return trade-advice                       :bug:
   from find-first-advice
** Scheme
#+begin_src scheme output drawer
  #lang racket
  (require crypto-trading/advicer
	   crypto-trading/test
	   crypto-trading/plot
	   crypto-trading/math)

  (define (find-advice  time-series #:step [step 600] [window-size step] #:scope [scope take] #:advice [advice #f])
    (with-handlers ([exn:fail:contract? (lambda (exn)
					  #f)])
      (begin
	(displayln advice)
	(displayln (get-advice time-series))
	(if (get-advice time-series)
	    (displayln "ad")
	    (displayln "no"))
	(if advice
	  advice
	  (find-advice time-series
		       #:step step
		       (+ step window-size)
		       #:advice (get-advice (scope time-series window-size))
		       #:scope scope)))))

  (define (remove-noise)
    (find-advice #:scope drop #:step 150 (test-data-source noise-start aprox-peak-after-noise))) ;

  (define (plot-noise)
    (plot-on-frame (lines (test-data-source noise-start aprox-peak-after-noise))))

  (plot-noise)
#+end_src

#+RESULTS:
#+begin_src scheme output drawer
  #lang racket
  (require crypto-trading/advicer
	   crypto-trading/test
	   crypto-trading/plot
	   crypto-trading/math)
  (test-data-source noise-start aprox-peak-after-noise)

#+end_src



** reverse is done in [[./scratch.rkt]]
** Focal point parabola
** convert to JSON
#+BEGIN_SRC sh
  sqlite3  2018-11-18-22\:21\:00-2019-02-18-22\:21\:00.db "select json_array(start, open) as ohcl from candles_EUR_XMR;" | jq -s .

#+END_SRC
