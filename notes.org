# -*- org-use-property-inheritance: t; org-confirm-babel-evaluate: nil;-*-
* Notes
** First dataset
 2018-11-18 22:21:00

 2019-02-18 22:21:00
 [[file:2018-11-18-22:21:00-2019-02-18-22:21:00.db]]
** COMMENT Test
tests are in ./test.rkt also testing plot

#+name: test-data
#+begin_src racket :results output drawer :noweb yes
  (require db)
  (define *db*
    (sqlite3-connect #:database
                     "2018-11-18-22:21:00-2019-02-18-22:21:00.db"))
#+end_src

#+RESULTS: test-data
:results:
:end:

#+name: data-sorce
#+begin_src racket :results output drawer :noweb yes
  (require crypto-trading/data)
  (define test-data-source (select-window *db*))
#+end_src

#+name: plot-first-peak-target
#+begin_src racket :results output drawer
  #lang racket
  (require crypto-trading/test-data
           crypto-trading/plot
           crypto-trading/fit)
  (define rows (test-data-source first-trade second-trade-target))
  (define plotables (list (lines rows)
                          (function (make-fitf rows))))
  (plot-on-frame plotables)
#+end_src

#+RESULTS:
:results:
:end:

#+name: plot-first-peak-no-filters
#+begin_src racket :results output drawer :noweb yes
  #lang racket
  (require crypto-trading/test
           crypto-trading/plot)
  (define-values (first-peak fitf)
    (scan-window first-trade second-trade-target test-data-source))
  (define peak-rows (test-data-source first-trade first-peak))
  (println (round (/ (- first-peak first-trade) 60)))
  (println (string-append (number->string (fitf first-trade))
                          " "
                          (number->string(fitf first-peak))))
  (plot-on-frame (list (points peak-rows)
                       (function fitf)))
#+end_src

#+RESULTS: plot-first-peak-no-filters
:results:
4
"72.4375 79.5"
:end:
#+name: test-fit-header
#+begin_src racket :results output drawer
  #lang racket
  (require crypto-trading/test
           crypto-trading/plot
           crypto-trading/fit)

#+end_src
Using linear regression to filter out poly regression where linear
makes a better fit.
#+name: plot-first-peak-no-filters-linear-regression
#+begin_src racket :results output drawer
  #lang racket
  (require crypto-trading/test
           crypto-trading/plot
           crypto-trading/fit)

  (define-values (first-peak fitf)
    (scan-window first-trade second-trade-target test-data-source))
  (define peak-rows (test-data-source first-trade first-peak))
  (define-values (a b lfitf) (linear-regression (map vector->list peak-rows)))
  (define best-fit (evaluate-models peak-rows fitf lfitf))
  (plot-on-frame (list (points peak-rows)
                       (function fitf)
                       (function lfitf)))
  best-fit
#+end_src

#+RESULTS: plot-first-peak-no-filters-linear-regression
:results:
#<procedure:...-trading/fit.rkt:22:14>
:end:
#+name: test-regression-explicit-squared-error
#+begin_src racket :results output drawer :noweb yes
  #lang racket
  (require crypto-trading/test
           crypto-trading/plot
           crypto-trading/fit)

  (define rows (test-data-source first-trade (+ 600 first-trade)))
  (define-values (a b lfit) (linear-regression (map vector->list rows)))
  (define pfit (make-fitf rows))
  (define les (squared-error lfit rows))
  (define pes (squared-error pfit rows))
  (list les pes)
#+end_src

#+RESULTS:
:results:
'(0.002749090908243732 66.56590468749998)
:end:
