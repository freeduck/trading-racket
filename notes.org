# -*- org-use-property-inheritance: t; org-confirm-babel-evaluate: nil;-*-
* Notes
** First dataset
 2018-11-18 22:21:00

 2019-02-18 22:21:00
 [[file:2018-11-18-22:21:00-2019-02-18-22:21:00.db]]
** COMMENT Test
tests are in ./test.rkt also testing plot

#+name: test-data
#+begin_src racket :results output drawer :noweb yes
  (require db)
  (define *db*
    (sqlite3-connect #:database
                     "2018-11-18-22:21:00-2019-02-18-22:21:00.db"))
#+end_src

#+RESULTS: test-data
:results:
:end:

#+name: data-sorce
#+begin_src racket :results output drawer :noweb yes
  (require crypto-trading/data)
  (define test-data-source (select-window *db*))
#+end_src

#+name: plot-first-peak-target
#+begin_src racket :results output drawer
  #lang racket
  (require crypto-trading/test-data
           crypto-trading/plot
           crypto-trading/fit)
  (define rows (test-data-source first-trade second-trade-target))
  (define plotables (list (lines rows)
                          (function (make-fitf rows))))
  (plot-on-frame plotables)
#+end_src

#+RESULTS:
:results:
:end:

#+name: plot-first-peak-no-filters
#+begin_src racket :results output drawer :noweb yes
  #lang racket
  (require crypto-trading/test
           crypto-trading/plot)
  (define-values (first-peak fitf)
    (scan-window first-trade second-trade-target test-data-source))
  (define peak-rows (test-data-source first-trade first-peak))
  (println (round (/ (- first-peak first-trade) 60)))
  (println (string-append (number->string (fitf first-trade))
                          " "
                          (number->string(fitf first-peak))))
  (plot-on-frame (list (points peak-rows)
                       (function fitf)))
#+end_src

#+RESULTS: plot-first-peak-no-filters
:results:
4
"72.4375 79.5"
:end:
#+name: test-fit-header
#+begin_src racket :results output drawer
  #lang racket
  (require crypto-trading/test
           crypto-trading/plot
           crypto-trading/fit)

#+end_src
Using linear regression to filter out poly regression where linear
makes a better fit.
#+name: plot-first-peak-no-filters-linear-regression
#+begin_src racket :results output drawer
  #lang racket
  (require crypto-trading/test
           crypto-trading/fit
           crypto-trading/plot)

  (define-values (first-peak fitf)
    (scan-window first-trade second-trade-target test-data-source))
  (define peak-rows (test-data-source first-trade first-peak))
  (define-values (a b lfitf) (linear-regression (map vector->list peak-rows)))
  (define best-fit (evaluate-models peak-rows fitf lfitf))
  (plot-on-frame (list (points peak-rows)
                       (function fitf)
                       (function lfitf)))
  best-fit
#+end_src

#+RESULTS: plot-first-peak-no-filters-linear-regression
:results:
#<procedure:...-trading/fit.rkt:22:14>
:end:
#+name: test-regression-explicit-squared-error
#+begin_src racket :results output drawer :noweb yes
  #lang racket
  (require crypto-trading/test
           crypto-trading/fit)

  (define rows (test-data-source first-trade (+ 600 first-trade)))
  (define-values (a b lfit) (linear-regression (map vector->list rows)))
  (define pfit (make-fitf rows))
  (define les (squared-error lfit rows))
  (define pes (squared-error pfit rows))
  (list les pes)
#+end_src

#+RESULTS:
:results:
'(0.002749090908243732 66.56590468749998)
:end:
Test find-peak:
Target peak can be detected and situations where linear regression fit better no peak is found
#+name: find-target-peak
#+begin_src racket :results output drawer
  #lang racket
  (require crypto-trading/test
           crypto-trading/fit)

  (define first-10-minutes-rows (test-data-source first-trade (+ 600 first-trade)))
  (define 10-min-peak (find-peak first-10-minutes-rows))
  (define first-target-rows (test-data-source first-trade second-trade-target))
  (define trade-peak (find-peak first-target-rows))
  (list 10-min-peak trade-peak)
#+end_src

#+RESULTS: find-peak
:results:
'(#f #<procedure:...-trading/fit.rkt:44:0>)
:end:
Find first peak using find-peak as filter when scanning
#+begin_src racket :results output drawer
  #lang racket
  (require crypto-trading/test
           crypto-trading/fit)

  (define first-found-peak (find-first-peak test-data-source first-trade second-trade-target))
  (define delta (- (first-found-peak) first-trade))
  (define hours (exact->inexact (/ delta 3600)))
  (println delta)
  (println hours)

#+end_src

#+RESULTS:
:results:
7200
2.0
:end:

#+begin_src racket :results output drawer
  #lang racket
  (require crypto-trading/test
           crypto-trading/fit
           crypto-trading/plot)

  (define first-found-peak (find-first-peak test-data-source first-trade second-trade-target))
  (define rows (test-data-source first-trade (first-found-peak)))
  (define analysis (trade-report-analysis first-found-peak))
  (plot-on-frame (list (lines rows)
                       (function (regression-analysis-linearfun analysis))
                       (function (regression-analysis-polyfun analysis))))
  (displayln (regression-analysis-linear-slope analysis))
#+end_src

#+RESULTS:
:results:
0.00011637961346298162
:end:
#+begin_src racket :results output drawer
  #lang racket
  (require crypto-trading/advicer
           crypto-trading/test)
  ;; First target - advice should be 'buy
  (get-advice (test-data-source first-trade second-trade-target))
  ;; First 10 minutes should be 'wait. prize delta too small
  (get-advice (test-data-source first-trade (+ 600 first-trade)))
  ;; First two hours should be 'wait. prize delta too small
  (get-advice (test-data-source first-trade (+ 7200 first-trade)))
#+end_src

#+RESULTS:
:results:
#<procedure:trade-advice>
#f
#f
:end:

#+begin_src racket :results output drawer
  #lang racket
  (require crypto-trading/test
           crypto-trading/plot)

  (define two-hour-rows (test-data-source first-trade 1542594240))
  (plot-on-frame (list (lines two-hour-rows)))
#+end_src

#+RESULTS:
:results:
:end:
#+name: plot-first-advice
#+begin_src racket :results output drawer
  #lang racket
  (require crypto-trading/advicer
           crypto-trading/test
           crypto-trading/plot)
  (define advice-index (find-first-advice (test-data-source first-trade second-trade-target)))
  (define advice (trade-report-analysis advice-index))
  (define analysis (trade-advice-analysis advice))
  (define polyfun (regression-analysis-polyfun analysis))
  (define linearfun (regression-analysis-linearfun analysis))
  (displayln (advice-index))
  (plot-on-frame (list (lines (test-data-source first-trade second-trade-target))
                       (lines (test-data-source first-trade (advice-index))
                              #:color '(0 200 0))
                       (function linearfun first-trade (advice-index)
                                 #:color '(200 200 0))
                       (function polyfun first-trade (advice-index)
                                 #:color '(0 0 200))))
  (displayln (exact->inexact (/ (- (advice-index) first-trade) 3600)))
#+end_src

#+RESULTS: plot-first-advice
:results:
1542687840
30.0
:end:
Found with pre model filter: threshold 2% of previous trade. And only
trailing peaks
#+name: plot-first-real-advice
#+begin_src racket :results output drawer
  #lang racket
  (require crypto-trading/test
           crypto-trading/plot
           crypto-trading/advicer)
  (define advice (get-advice (test-data-source first-trade 1542659640)))
  (define analysis (trade-advice-analysis advice))
  (define polyfun (regression-analysis-polyfun analysis))
  (define linearfun (regression-analysis-linearfun analysis))
  (define time-series (test-data-source first-trade 1542659640))
  (define last-data-point (last time-series))
  (define poly-prediction (polyfun (vector-ref last-data-point 0)))
  (define linear-prediction (linearfun (vector-ref last-data-point 0)))
  (define prediction-diff (abs (- poly-prediction linear-prediction)))
  (displayln "Diff")
  (displayln prediction-diff)
  (plot-on-frame (list (lines (test-data-source first-trade second-trade-target))

                       (lines (test-data-source first-trade 1542659640)
                              #:color '(0 200 0))
                       (function polyfun first-trade 1542659640
                                 #:color '(200 200 0))
                       ;; (function linearfun first-trade 1542659640
                       ;;           #:color '(0 200 200))
                       ))
#+end_src

#+RESULTS: plot-first-real-advice
:results:
Diff
0.03896740369964391
:end:

#+RESULTS:
:results:
:end:
#+name: fit-vector
#+begin_src racket :results output drawer
  #lang racket

  (require crypto-trading/test
           crypto-trading/fit)
  ;; Trailing bottom
  (define rows (test-data-source first-trade second-trade-target))
  (define x&y (transpose rows))
  (define fitvector (apply fit (append x&y '(2))))
  (displayln fitvector)
  ;; Leading top peak 4 hour
  (define first-advice-rows-any-peak (test-data-source first-trade 1542594240))
  (define advice-x&y (transpose first-advice-rows-any-peak))
  (define advice-vector (apply fit (append advice-x&y '(2))))
  (displayln advice-vector)
  ;; Trailing top peak 2 hour
  (define 2h-rows (test-data-source first-trade (+ 7200 first-trade)))
  (define 2h-x&y (transpose 2h-rows))
  (define 2h-vector (apply fit (append 2h-x&y '(2))))
  (displayln 2h-vector)

#+end_src

#+RESULTS:
:results:
#(2361157645.443029 -3.0610199421140973 9.920815046590834e-10)
#(-68827289515.43556 89.23627567761474 -2.892425716572949e-08)
#(-46450503479.14099 60.224184303559184 -1.9520522369660206e-08)
:end:
** TODO test that peak lies before now
